* Get Repositories

#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))

(setq package-enable-at-startup nil)
(package-initialize)
#+end_src

* Emacs Config Changes
** Layout & Indentation

#+begin_src emacs-lisp
(setq display-line-numbers-type 'relative)
(global-display-line-numbers-mode)
(global-hl-line-mode 1)
(global-visual-line-mode t)
(setq inhibit-startup-screen t)
(setq-default show-trailing-whitespace t)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq css-indent-offset 2)
(setq js-indent-level 2)
#+end_src

** Font Config

#+begin_src emacs-lisp
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)
(add-to-list 'default-frame-alist '(font . "Source Code Pro Semibold" ))
(set-face-attribute 'default t :font "Source Code Pro Semibold" )
#+end_src

** Empty Scratch

#+begin_src emacs-lisp
(setq initial-scratch-message "")
#+end_src

** Other
   Some tweaks to built-ins that I enjoy. Namely, auto pairing and
   code folding.
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'hs-minor-mode)
(global-auto-revert-mode)
#+end_src

* Get & Configure 3rd Party Packages
** Use Package
   The mother of all packages. Streamlines plugin installations and
   config.
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+end_src

** Ace Jump
   "Easy Motion" for emacs
#+begin_src emacs-lisp
(use-package ace-jump-mode
  :ensure t
  :bind ("C-'" . ace-jump-mode))
#+end_src

** All The Icons
   Icon support
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :config
  (setq all-the-icons-color-icons t))
#+end_src

** Better Defaults
   Better default emacs settings
#+begin_src emacs-lisp
(use-package better-defaults
  :ensure t)
#+end_src

** Doom Family
  /"In the first age, in the first battle, when the shadows first/
  /lengthened, one stood. Burned by the embers of Armageddon, his soul/
  /blistered by the fires of Hell and tainted beyond ascension, he/
  /chose the path of perpetual torment. In his ravenous hatred he found/
  /no peace; and with boiling blood he scoured the Umbral Plains/
  /seeking vengeance against the dark lords who had wronged him. He/
  /wore the crown of the Night Sentinels, and those that tasted the/
  /bite of his sword named him... the Doom Slayer."/
  ...Theming stuff
*** Modeline
    Modeline. Not sold on it yet, but it's nice enough
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :defer t
  :hook (after-init . doom-modeline-init))
#+end_src

*** Themes
    Doom Theme Bundle
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :init
  (setq doom-themes-enable-bold t
	doom-themes-enable-italic t)
        (load-theme 'doom-city-lights t))
#+end_src

** Emmet Mode
   A must have for web development
#+begin_src emacs-lisp
(use-package emmet-mode
  :ensure t
  :config
  (add-hook 'sgml-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook 'emmet-mode)
  (setq emmet-expand-jsx-className t))
#+end_src

** Evil Mode
   I am evil!
#+begin_src emacs-lisp
    (use-package evil
      :ensure t
      :config
      (evil-mode t)
      (use-package evil-magit
          :ensure t)
      (use-package evil-org
          :ensure t
          :after org
          :config
          (add-hook 'org-mode-hook 'evil-org-mode)
          (add-hook 'evil-org-mode-hook
          (lambda ()
                (evil-org-set-key-theme)))
                (require 'evil-org-agenda)
                (evil-org-agenda-set-keys))
      (use-package evil-leader
        :ensure t
        :config
        (global-evil-leader-mode)
        (evil-leader/set-key
          "]" 'next-buffer
          "[" 'previous-buffer
          "l" 'treemacs)))
  ;;   (add-hook 'neotree-mode-hook
  ;;       (lambda ()
  ;;         (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
  ;;         (define-key evil-normal-state-local-map (kbd "I") 'neotree-hidden-file-toggle)
  ;;         (define-key evil-normal-state-local-map (kbd "z") 'neotree-stretch-toggle)
  ;;         (define-key evil-normal-state-local-map (kbd "R") 'neotree-refresh)
  ;;         (define-key evil-normal-state-local-map (kbd "m") 'neotree-rename-node)
  ;;         (define-key evil-normal-state-local-map (kbd "c") 'neotree-create-node)
  ;;         (define-key evil-normal-state-local-map (kbd "d") 'neotree-delete-node)

  ;;         (define-key evil-normal-state-local-map (kbd "s") 'neotree-enter-vertical-split)
  ;;         (define-key evil-normal-state-local-map (kbd "S") 'neotree-enter-horizontal-split)

  ;;         (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter))
  ;; )
#+end_src

** Expand Region (Disabled)
   Disabled as we do not require this with evil-mode keeping for
   reference in case I change my mind. Expand region visual selection
   between braces and quotes
#+begin_src emacs-lisp
  ;; (use-package expand-region
  ;;   :ensure t
  ;;   :config
  ;;   (global-set-key (kbd "C-=") 'er/expand-region))
#+end_src

** Flycheck (Linting)

#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :config
  (setq-default flycheck-disabled-checker 'javascript-jshint)
  (setq-default flycheck-disabled-checker 'json-jsonlist)
  (setq-default flycheck-disabled-checker 'javascript-eslint)
  (setq-default flycheck-javascript-eslint-executable "eslint-project-relative")
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (defun my/use-eslint-from-node-modules ()
    (let* ((root (locate-dominating-file
    (or (buffer-file-name) default-directory)
      "node_modules"))
      (eslint (and root
      (expand-file-name "node_modules/eslint/bin/eslint.js"
        root))))
      (when (and eslint (file-executable-p eslint))
    (setq-local flycheck-javascript-eslint-executable eslint))))
  (add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
  (global-flycheck-mode)
  )
#+end_src

** Git Gutter

#+begin_src emacs-lisp
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode t)
    (global-set-key (kbd "C-x C-g") 'git-gutter)
    (global-set-key (kbd "C-x v =") 'git-gutter:popup-hunk)

    ;; Jump to next/previous hunk
    (global-set-key (kbd "C-x p") 'git-gutter:previous-hunk)
    (global-set-key (kbd "C-x n") 'git-gutter:next-hunk)

    ;; Stage current hunk
    (global-set-key (kbd "C-x v s") 'git-gutter:stage-hunk)

    ;; Revert current hunk
    (global-set-key (kbd "C-x v r") 'git-gutter:revert-hunk)
    (custom-set-variables
      '(git-gutter:update-interval 2)
      '(git-gutter:modified-sign "▍") ;; two space
      '(git-gutter:added-sign "▍")    ;; multiple character is OK
      '(git-gutter:deleted-sign "▍")))
#+end_src

** Helm
   Helm makes finding stuff a heck of a lot nicer, when paired with AG
   especially. Requires system installation of the-silver-searcher.
#+begin_src emacs-lisp
(use-package helm
  :ensure t
  :bind (("M-x" . helm-M-x)
         ("C-x C-f" . helm-find-files)
         ("C-c h p" . helm-projectile)
         ("C-c h C-p s" . helm-projectile-switch-project)
         ("C-c a C-p" . projectile-mode))
  :init
  (require 'helm-config)
  :config
  (helm-mode 1)
  (custom-set-variables '(helm-follow-mode-persistent t))
  (use-package helm-projectile
    :ensure t)
  (use-package helm-ag
    :ensure t
    :bind (("C-c a g" . helm-do-ag)
           ("C-c a t" . helm-do-ag-this-file)
           ("C-c a p" . helm-do-ag-project-root)
           ("C-c a b" . helm-do-ag-buffers)
           ("C-c C-a p" . helm-projectile-ag))))
#+end_src

** Magit
   Amazing git repo management
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :config
  (global-set-key (kbd "C-c g") 'magit-status))
#+end_src

** Modes & Auto Completion
*** Company (Auto Complete)

#+begin_src emacs-lisp
(use-package company
:ensure t
:config
(setq company-idle-delay 0)
(setq company-minimum-prefix-length 3)
(setq company-backends
      '((company-files          ; files & directory
         company-keywords       ; keywords
         company-capf
         company-yasnippet
         )
        (company-abbrev company-dabbrev)
        ))
(global-set-key (kbd "TAB") #'company-indent-or-complete-common)
(global-company-mode t))
#+end_src

*** Deferred
**** TODO: Figure out why I installed this
#+begin_src emacs-lisp
(use-package deferred
  :ensure t)
#+end_src

*** Jedi (Python)

#+begin_src emacs-lisp
  ;; (use-package company-jedi
  ;;     :ensure t
  ;;     :config
  ;;     (add-hook 'python-mode-hook 'jedi:setup))

  ;; (defun my/python-mode-hook ()
  ;;   "Company back-end hook for jedi."
  ;;   (add-to-list 'company-backends 'company-jedi))

  ;; (add-hook 'python-mode-hook 'my/python-mode-hook)
#+end_src

*** JS2-Mode

#+begin_src emacs-lisp
(use-package js2-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  ;; Better imenu
  (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
  :ensure t)
#+end_src

*** JS2-refactor

#+begin_src emacs-lisp
(use-package js2-refactor
  :config
  (add-hook 'js2-mode-hook #'js2-refactor-mode)
  (js2r-add-keybindings-with-prefix "C-c C-r")
  (define-key js2-mode-map (kbd "C-k") #'js2r-kill)
  :ensure t)
#+end_src

*** LSP

#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t
  :config
  (use-package lsp-ui
    :ensure t
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode))
  (use-package lsp-vue
    :ensure t
    :config
    (add-hook 'vue-mode-hook #'lsp-vue-mmm-enable))
  (use-package lsp-javascript-typescript
    :ensure t
    :config
    (add-hook 'js-mode-hook #'lsp-javascript-typescript-enable)
    (add-hook 'js2-mode-hook #'lsp-javascript-typescript-enable)
    (add-hook 'rjsx-mode #'lsp-javascript-typescript-enable))
  (use-package lsp-python
    :ensure t
    :config
    (add-hook 'python-mode-hook #'lsp-python-enable)))
#+end_src

*** Markdown-Mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+end_src

*** Org Mode <3
    This amazingly well documented Org config is here because of org
    mode. As well as some semblence of structure in my life.
#+begin_src emacs-lisp
(use-package org
  :ensure t
  :config
  (setq org-agenda-files (append
  (file-expand-wildcards "~/Cloud/Orgs/*.org")))
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  (use-package org-caldav
    :ensure t
    :config
    (setq org-caldav-url "https://cloud.trevdev.ca/remote.php/dav/calendars/trevdev")
    (setq org-caldav-calendar-id "org")
    (setq org-caldav-inbox "~/Cloud/Orgs/caldav.org")
    (setq org-caldav-files org-agenda-files)
    (setq org-icalendar-timezone "America/Vancouver"))
    (setq org-icalendar-alarm-time 1)
    (setq org-icalendar-include-todo t)
    (setq org-icalendar-use-deadline '(event-if-todo event-if-not-todo todo-due))
    (setq org-icalendar-use-scheduled '(todo-start event-if-todo event-if-not-todo))
  (eval-after-load "org" '(require 'ox-md nil t))
  (use-package ox-gfm
    :ensure t
    :config
    (eval-after-load "org" '(require 'ox-gfm nil t)))
    (setq org-log-done 'time))
#+end_src

*** Pug Mode
    Pug html templating, for those who don't know. Used to be called
    Jade. I don't endorse pug anymore, I just have it buried in old
    projects.
#+begin_src emacs-lisp
(use-package pug-mode
  :ensure t)
#+end_src

*** Python-Environment
    Virtualenv support.
#+begin_src emacs-lisp
(use-package python-environment
  :ensure t)
#+end_src

*** RJSX-Mode
    React Development. Need I say more?
#+begin_src emacs-lisp
(use-package rjsx-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("containers\\/.*\\.js\\'" . rjsx-mode))

  (add-to-list 'auto-mode-alist '("components\\/.*\\.js\\'" . rjsx-mode))
  (add-to-list 'company-backends 'company-etags))
#+end_src

*** SCSS/CSS

#+begin_src emacs-lisp
(use-package css-mode
  :ensure t
  :config
  (add-to-list 'company-backends 'company-css))
#+end_src

*** Vue Mode
    /"It's as if Angular & React had sex."/
    =Maximilian Schwarzmüller=
#+begin_src emacs-lisp
(use-package vue-mode
  :ensure t
  :config
  (setq mmm-submode-decoration-level 0))
#+end_src

*** Web-Mode

#+begin_src emacs-lisp
(use-package web-mode
  :ensure t
  :config
  (add-to-list 'company-backends 'company-etags))

(use-package json-mode
  :ensure t)
#+end_src

*** Xref-JS2

#+begin_src emacs-lisp
(use-package xref-js2
  :config
  (define-key js-mode-map (kbd "M-.") nil)
  (add-hook 'js2-mode-hook (lambda ()
			     (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
  :ensure t)
#+end_src

*** YAML Mode

#+begin_src emacs-lisp
(use-package yaml-mode
  :ensure t)
#+end_src

** Rainbow Delimiters
   Nice, colorful, matching brackets.
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src

** Smartparens
   Auto-wraps text in brackets/quotes.

#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (require 'smartparens-config)
    (smartparens-global-mode t)
    (use-package evil-smartparens
      :ensure t
      :config
      (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)))
#+end_src

** Themes
   Other than Doom...

#+begin_src emacs-lisp
#+end_src

** Treemacs
   Nerdtree on steroids
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (use-package treemacs-evil
    :ensure t)
  (progn
    (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
          treemacs-deferred-git-apply-delay   0.5
          treemacs-file-event-delay           5000
          treemacs-file-follow-delay          0.2
          treemacs-follow-after-init          t
          treemacs-follow-recenter-distance   0.1
          treemacs-goto-tag-strategy          'refetch-index
          treemacs-indentation                2
          treemacs-indentation-string         " "
          treemacs-is-never-other-window      nil
          treemacs-no-png-images              nil
          treemacs-project-follow-cleanup     nil
          treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-recenter-after-file-follow nil
          treemacs-recenter-after-tag-follow  nil
          treemacs-show-hidden-files          t
          treemacs-silent-filewatch           nil
          treemacs-silent-refresh             nil
          treemacs-sorting                    'alphabetic-desc
          treemacs-space-between-root-nodes   t
          treemacs-tag-follow-cleanup         t
          treemacs-tag-follow-delay           1.5
          treemacs-width                      35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;; (treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'extended))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("C-x t s"   . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)
#+end_src

** Yasnippet
   Snippet support
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1)
  (use-package yasnippet-snippets
    :ensure t)
  (yas-reload-all))
#+end_src

